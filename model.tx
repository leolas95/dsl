Program:
    declarations *= Declaration
;

Declaration:
    ( DetectActivity
    | TrackObject
    | OnStatement
    | VariableDeclaration
    | WhenStatement
    )
;

DetectActivity:
    "detect" "activity"
        activity_name=STRING
        ("inzone" zones+=ZoneValue[','])?
        ("from" cameras+=CameraValue[','])?
;

CameraValue:
    CameraDeclaration | ID
;

TrackObject:
    "track"
        ("min" "=" min=INT)?
        ("max" "=" max=INT)?
        target=TargetValue
        (target_properties=PropertyDeclaration)?
        ("inzone" zones+=ZoneValue[','])?
        ("from" cameras+=CameraValue[','])?
        ("incr" counter=ID)?
;

ZoneValue:
   ZoneVariableDeclaration | ZoneLiteralDeclaration | ID
;

TargetValue:
    TargetVariableDeclaration | TargetLiteralDeclaration | ID
;

VariableDeclaration:
    name=ID "=" value=VariableValue
;

VariableValue:
    (CameraDeclaration | TargetVariableDeclaration | ZoneVariableDeclaration | INT)
;

CameraDeclaration:
    "camera" type=CameraType
;

CameraType:
    IpCamera | NamedCamera | NumberedCamera
;

IpCamera:
    "ip" ":" ip=IpValue
;

NamedCamera:
    "name" ":" name=STRING
;

NumberedCamera:
    "number" ":" number=INT
;

IpValue:
    ip=/\b\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}\b/
;

TargetVariableDeclaration:
    "target" target_name=STRING properties=PropertyDeclaration?
;

TargetLiteralDeclaration:
    target_name=STRING properties=PropertyDeclaration?
;

PropertyDeclaration:
    "with" properties+=Property[',']
;

Property:
    property_value=STRING property_name=STRING
;

ZoneLiteralDeclaration:
    zone=STRING
;

ZoneVariableDeclaration:
    // The z is to differentiate a ZoneDeclaration from a TargetDeclaration
    "zone" zone=STRING
;

OnStatement:
    "on" "activity" activity_name=STRING "do" action=ID "(" arguments*=STRING[","] ")"
;

WhenStatement:
    "when" bool_expr=BooleanExpression "do" action=ID "(" arguments*=STRING[","] ")"
;

BooleanExpression:
    lhoperand=LeftBooleanOperand operator=RelationalOperator rhoperand=RightBooleanOperand
;

LeftBooleanOperand:
    ID
;

RelationalOperator:
    ">=" | "<=" | ">" | "<" | "==" | "!="
;

RightBooleanOperand:
    ID | INT
;